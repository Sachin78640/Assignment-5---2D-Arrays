function findMin(nums) {
  let left = 0;
  let right = nums.length - 1;

  while (left < right) {
    const mid = Math.floor((left + right) / 2);

    if (nums[mid] > nums[right]) {
      left = mid + 1;
    } else {
      right = mid;
    }
  }

  return nums[left];
}

// Test case
const nums = [3, 4, 5, 1, 2];
const minElement = findMin(nums);
console.log(minElement); // Output: 1


The findMin function takes an array nums as input. It initializes two pointers, left and right, to track the boundaries of the search range.

The function uses a while loop that continues until left is no longer less than right. In each iteration, it calculates the middle index mid using the formula (left + right) / 2 rounded down to the nearest integer.

If the element at mid is greater than the element at right, it means that the minimum element is located to the right of mid, so the left pointer is updated to mid + 1.

Otherwise, if the element at mid is less than or equal to the element at right, it means that the minimum element is located at mid or to the left of mid, so the right pointer is updated to mid.

The loop continues until the search range is narrowed down to a single element, and then it returns that element, which represents the minimum element in the array.

In the given example, the output will be 1 as the minimum element in the array [3, 4, 5, 1, 2] is 1.
